% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Abstract_ShinyAuth.R
\name{Abstract_ShinyAuth}
\alias{Abstract_ShinyAuth}
\title{Abstract Authentication Class}
\description{
Abstract Authentication Class

Abstract Authentication Class
}
\details{
Abstract Authentication Class from which all provider classes must inherit.
}
\seealso{
get_access_token
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{url_auth_template}}{URL template for auth entrypoint.}

\item{\code{url_token_template}}{URL template for token entrypoint.}

\item{\code{url_userinfo_template}}{URL template for userinfo entrypoint.}

\item{\code{url_logout_template}}{URL template for logout entrypoint.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Abstract_ShinyAuth$new()}}
\item \href{#method-url_auth}{\code{Abstract_ShinyAuth$url_auth()}}
\item \href{#method-url_token}{\code{Abstract_ShinyAuth$url_token()}}
\item \href{#method-url_userinfo}{\code{Abstract_ShinyAuth$url_userinfo()}}
\item \href{#method-url_logout}{\code{Abstract_ShinyAuth$url_logout()}}
\item \href{#method-server}{\code{Abstract_ShinyAuth$server()}}
\item \href{#method-ui}{\code{Abstract_ShinyAuth$ui()}}
\item \href{#method-app}{\code{Abstract_ShinyAuth$app()}}
\item \href{#method-scripts}{\code{Abstract_ShinyAuth$scripts()}}
\item \href{#method-has_auth_code}{\code{Abstract_ShinyAuth$has_auth_code()}}
\item \href{#method-get_access_token}{\code{Abstract_ShinyAuth$get_access_token()}}
\item \href{#method-get_userinfo}{\code{Abstract_ShinyAuth$get_userinfo()}}
\item \href{#method-generate_state}{\code{Abstract_ShinyAuth$generate_state()}}
\item \href{#method-clone}{\code{Abstract_ShinyAuth$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Authentication class for shiny app
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$new(
  client_id,
  client_secret,
  app_url,
  auth_domain,
  scope = "openid profile email",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client_id}}{Client ID from Service Provider}

\item{\code{client_secret}}{Client Secret from Service Provider}

\item{\code{app_url}}{This application entrypoint url}

\item{\code{auth_domain}}{The domain at which to reach authentication server}

\item{\code{scope}}{Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account. An application can request one or more scopes, this information is then presented to the user in the consent screen, and the access token issued to the application will be limited to the scopes granted.}

\item{\code{...}}{Other parameters that will get stored in Service Provider settings. Can be used in url templates and in provider classes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new authentication object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-url_auth"></a>}}
\if{latex}{\out{\hypertarget{method-url_auth}{}}}
\subsection{Method \code{url_auth()}}{
Generate URL for auth entrypoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$url_auth(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{State to use for XSRF detection}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
URL for auth entrypoint
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-url_token"></a>}}
\if{latex}{\out{\hypertarget{method-url_token}{}}}
\subsection{Method \code{url_token()}}{
Generate URL for token entrypoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$url_token()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
URL for token entrypoint
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-url_userinfo"></a>}}
\if{latex}{\out{\hypertarget{method-url_userinfo}{}}}
\subsection{Method \code{url_userinfo()}}{
Generate URL for userinfo entrypoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$url_userinfo()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
URL for userinfo entrypoint
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-url_logout"></a>}}
\if{latex}{\out{\hypertarget{method-url_logout}{}}}
\subsection{Method \code{url_logout()}}{
Generate URL for logout entrypoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$url_logout(return_url = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{return_url}}{Where user is redirected to after successful logout. Defaults to app url.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
URL for logout entrypoint
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-server"></a>}}
\if{latex}{\out{\hypertarget{method-server}{}}}
\subsection{Method \code{server()}}{
Authenticating shiny server wrapper.
It takes a shiny server functions, and starts it once we have successfully authenticated the user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$server(server)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{server}}{Shiny server function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Shiny server function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\if{latex}{\out{\hypertarget{method-ui}{}}}
\subsection{Method \code{ui()}}{
Authenticating UI wrapper for shiny ui function
It will serve a minimalist shiny ui if user needs authentication.
Will run given ui if user seems to come back from authenticating server by redirect.
It is then up to the server function to validate and populate ui.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$ui(ui)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ui}}{Shiny ui function or page object (ex. fluidPage)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Shiny ui
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-app"></a>}}
\if{latex}{\out{\hypertarget{method-app}{}}}
\subsection{Method \code{app()}}{
Convenience function to wrap single file app in one go
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$app(ui, server)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ui}}{Shiny ui function}

\item{\code{server}}{Shiny server function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A full authenticated shiny app
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scripts"></a>}}
\if{latex}{\out{\hypertarget{method-scripts}{}}}
\subsection{Method \code{scripts()}}{
Injects needed JavaScript into user interface to be able to redirect and store/retrieve state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$scripts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Script tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_auth_code"></a>}}
\if{latex}{\out{\hypertarget{method-has_auth_code}{}}}
\subsection{Method \code{has_auth_code()}}{
Check if URL query parameters contains an auth code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$has_auth_code(params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{List of parsed url parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Boolean if code exists.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_access_token"></a>}}
\if{latex}{\out{\hypertarget{method-get_access_token}{}}}
\subsection{Method \code{get_access_token()}}{
Get access token from authentication server.
Used to get userinfo.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$get_access_token(code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{Authentication code from provider}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Access token
Got into some problems with httr and http/2 with Auth0.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_userinfo"></a>}}
\if{latex}{\out{\hypertarget{method-get_userinfo}{}}}
\subsection{Method \code{get_userinfo()}}{
Get user info from authentication server
Usually contains info on names, unique keys, email and sometimes roles.
Usually somewhat configurable at service provider, so it could be used to pass along user roles/groups
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$get_userinfo(access_token)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{access_token}}{Access token}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
User info
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate_state"></a>}}
\if{latex}{\out{\hypertarget{method-generate_state}{}}}
\subsection{Method \code{generate_state()}}{
Generating random state
The state parameter is used to protect against XSRF.
Application generates a random string and send it to the authorization server using the state parameter.
The authorization server send back the state parameter.
If both state are the same => OK.
If state parameters are different, someone else has initiated the request.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$generate_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
10 random alphanumeric characters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Abstract_ShinyAuth$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
